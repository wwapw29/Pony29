@page "/"
@inject IJSRuntime JSRuntime
@inject MarkdownService MarkdownService
@using OpenAI
@using OpenAI.Chat
@using System.ClientModel
@using System.Text

<div style="display: flex; flex-direction: column; height: 100%;padding:10px">
    <!-- AntList 占满剩余高度 -->
    <AntList DataSource="@comments" TItem="commentItem" style="flex-grow: 1; overflow-y: auto; display: flex; flex-direction: column-reverse; ">
        <ListItem>
            <Comment Avatar="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" 
            Author="@context.name" 
            Datetime='@context.time.ToString("yyyy-MM-dd HH:mm:ss")' 
            Actions="@(new[]{EditAction(context)})" 
            Placement="context.role is Role.ai ? CommentPlacement.Left : CommentPlacement.Right"
            Style="width:100%"
            >
                <ContentTemplate>
                    @if (context.ischeck)
                    {
                        <TextArea @bind-Value=context.strPool></TextArea>
                    }
                    else {
                        <div style="border:1px solid #ccc; padding: 8px;">
                            @context.markupStr
                        </div>
                    }
                </ContentTemplate>
            </Comment>
        </ListItem>
    </AntList>

    @* <h3>User:</h3>
<div style="border: 1px solid #ccc; padding: 8px;">
    @markup <!-- 使用 MarkupString 渲染 HTML -->
</div>
<h3>AI:</h3> *@

    @* <Button OnClick="ChangeAssMessageModel">切换显示</Button> *@

    <div style="width:100%">
        <TextArea style="width: calc(100% - 100px);" @bind-Value=renderedHtml></TextArea>
        <Button  OnClick="RenderHtml">发送讯息</Button>
    </div>

</div>
@code {
    // 可编辑的输入框
    private string renderedHtml = "";   // 渲染的 HTML 内容

    class commentItem{
        public string name { get; set; }//名字
        public DateTime time { get; set; }//时间
        public string strPool { get; set; }//原始字符串(编辑框里是它)
        public MarkupString? markupStr { get; set; }//转义后markup(显示的是它)
        public bool ischeck { get; set; }
        public Role role{ get; set; }
    }

    List<commentItem> comments = new List<commentItem>();
    List<ChatMessage> messages = new List<ChatMessage>();

    RenderFragment EditAction(commentItem comment)
    {
        return
        @<span>
            <Tooltip Title="编辑">
            <Icon Type="@IconType.Outline.Edit" OnClick="@(async()=>{comment.ischeck=!comment.ischeck;comment.markupStr=(MarkupString)MarkdownService.ConvertToHtml(comment.strPool);await HighLight();})" />
            </Tooltip>
        </span>
    ;
    }

    async Task RenderHtml()
    {
        MarkupString markup = new MarkupString(renderedHtml);

        commentItem Useritem = new() { name = "User",time=DateTime.Now,strPool=renderedHtml,markupStr=markup,ischeck=false,role=Role.user };

        comments.Add(Useritem);

        StateHasChanged();

        OpenAIClient client = new OpenAIClient(new System.ClientModel.ApiKeyCredential("sk-ydkolvutwmfgxzpzuzkcrupjeibbiqjmjhatmcepnrskgxtj"), new OpenAIClientOptions() { Endpoint = new Uri("https://api.siliconflow.cn/v1") });

        ChatClient chat = client.GetChatClient("Pro/deepseek-ai/DeepSeek-V3");

        messages.Add(new UserChatMessage(renderedHtml));
        renderedHtml = string.Empty;
        AsyncCollectionResult<StreamingChatCompletionUpdate> completionUpdates =  chat.CompleteChatStreamingAsync(messages);

        commentItem AIitem = new() { name = "AI", time = DateTime.Now, strPool = string.Empty, ischeck = false, role = Role.ai };
        comments.Add(AIitem);
        Console.WriteLine("streaming..");
        await foreach (var item in completionUpdates)
        {
            if (item.ContentUpdate.Count > 0)
            {
                AIitem.strPool += item.ContentUpdate[0].Text;
                AIitem.markupStr = (MarkupString)MarkdownService.ConvertToHtml(AIitem.strPool);

                StateHasChanged();
            }
        }
        await HighLight();
        Console.WriteLine("streaming done");
        messages.Add(new AssistantChatMessage(AIitem.strPool));
    }

   async Task HighLight(){
        await JSRuntime.InvokeVoidAsync("hljs.highlightAll");
    }


    enum Role{
        user,
        ai,
        system
    }

}


